# -*- coding: utf-8 -*-
"""Assessment Coding Test 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11EWyccEWEtHRE60fUy_QEwCz9Mito5QG
"""

def get_pixel_value(img, i, j):
    return 0 if img[i][j] < img[1][1] else 1

def compute_lbp(img):
    rows, cols = len(img), len(img[0])
    lbp_image = [[0] * (cols - 2) for _ in range(rows - 2)]

    if img is None:
        raise ValueError("Image is None")

    for i in range(1, rows - 1):
        for j in range(1, cols - 1):
            binary_values = [
                get_pixel_value(img, i-1, j-1),
                get_pixel_value(img, i-1, j),
                get_pixel_value(img, i-1, j+1),
                get_pixel_value(img, i, j+1),
                get_pixel_value(img, i+1, j+1),
                get_pixel_value(img, i+1, j),
                get_pixel_value(img, i+1, j-1),
                get_pixel_value(img, i, j-1)
            ]

            lbp_value = sum(val * (2**idx) for idx, val in enumerate(binary_values))
            lbp_image[i-1][j-1] = lbp_value

    return lbp_image

# Example Usage
image_path = "/content/download.png"
input_image = [
    [0, 0, 0, 0, 0],
    [0, 255, 255, 255, 0],
    [0, 255, 255, 255, 0],
    [0, 255, 255, 255, 0],
    [0, 0, 0, 0, 0]
]  # Replace this with your actual image data

if input_image is None:
    raise ValueError("Image is None")

lbp_result = compute_lbp(input_image)

# Display the original and LBP images
print("Original Image:")
for row in input_image:
    print(row)

print("\nLBP Result:")
for row in lbp_result:
    print(row)